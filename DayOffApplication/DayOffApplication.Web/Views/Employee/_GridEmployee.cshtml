@using DayOffApplication.Core.Enums.User
@using DevExtreme.AspNet.Mvc


@(
        Html.DevExtreme().DataGrid<EmployeeDTO>()
        .ID("employeeID")
        .Paging(p => p.PageSize(2))
        .SearchPanel(s => s.Visible(true))
        .AllowColumnResizing(true)
        .HoverStateEnabled(true)
        .AllowColumnReordering(true)
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(f => f.Visible(true))
        .ColumnChooser(c => c.Enabled(true))
        .Pager(p => p.ShowPageSizeSelector(true).ShowInfo(true).AllowedPageSizes(new[] { 25, 50, 100 }))
        .Scrolling(p => p.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
        .Editing(e => e.Mode(GridEditMode.Popup)
        .AllowUpdating(true)
        .UseIcons(true)
        .AllowAdding(true)
        .AllowDeleting(true)
        .Popup(p => p
        .Title("Personel Ekle/Güncelle")
        .ShowTitle(true)
        .Width(800)
        .Height(800)

        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
            .ColCount(1) //güncelleme ekranı tek sutun haline getirme
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.FirstName);
                groupItems.AddSimpleFor(m => m.LastName);
                groupItems.AddSimpleFor(m => m.Email);
                groupItems.AddSimpleFor(m => m.UserType);
                groupItems.AddSimpleFor(m => m.ManagerId);

            });
        }))
        )
        .Columns(columns =>
        {
            columns.AddFor(m => m.Id).Caption("ID").CssClass("text-center").Visible(false);
         
            columns.AddFor(m => m.FirstName).AllowResizing(true).CssClass("text-left");
            columns.AddFor(m => m.LastName).AllowResizing(true).CssClass("text-left");
            columns.AddFor(m => m.Email).AllowResizing(true).CssClass("text-center");
        
            columns.AddFor(m => m.ManagerId).Lookup(lookup => lookup
.DataSource(d => d.Mvc().Controller("Manager").LoadAction("GetList").Key("Id"))
.DisplayExpr("Name")
.ValueExpr("Id")).Caption("Yönetici");

            columns.AddFor(m => m.UserType)
                   .Name("İzin Tipi")
                   .Lookup(lookup =>
                   {
                       lookup.DataSource(EnumHelper<UserType>.GetEnumDataSource())
                             .DisplayExpr("Text")
                             .ValueExpr("Value");
                   });

            columns.AddFor(m => m.CreatedByEmail).CssClass("text-center").Visible(false);

            columns.AddFor(m => m.CreationTime).CssClass("text-center").Visible(false);

            columns.AddFor(m => m.ModificationByEmail).CssClass("text-center").Visible(false);

            columns.AddFor(m => m.ModificationTime).CssClass("text-center").Visible(false);

            columns.AddFor(m => m.Active).Caption("Aktif").CssClass("text-center");

            columns.Add().Type(GridCommandColumnType.Buttons).Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Text("Düzenle");
                b.Add().Name(GridColumnButtonName.Delete).Text("Sil");
            });

        })
       
        .DataSource(d => d.Mvc()
        .Controller("Employee")
        .LoadAction("GetList")
        .UpdateMethod("POST")
        .UpdateAction("Edit")
        .InsertAction("Post")
        .DeleteMethod("POST")
        .DeleteAction("Delete")
        .Key("Id")
        )
        .Export(e => e.Enabled(true)
            .AllowExportSelectedData(true)
            .Formats(new[] { "xlsx" })
        )
        .OnExporting("exporting")

        )

<script>

    function refreshButtonClicked(e) {
        $("#employeeID").dxDataGrid("instance").refresh();
    }



    var goruntule = function (e) {
        var url = '@Url.Action("EmployeeDetail", "Employee")?Id=' + e.row.key;
        window.open(url,"_self");
        }

</script>

<script>

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Employee');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Employee.xlsx');
            });
        });
    }

</script>